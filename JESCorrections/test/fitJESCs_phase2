#!/bin/bash
set -euo pipefail

## -------------------------
## Hard-coded inputs/options
## -------------------------
JESC_BASE=${CMSSW_BASE}/src/JMETriggerAnalysis/JESCorrections/test

#JRANTuple_NoPU=root://cms-xrd-global.cern.ch//store/group/phys_jetmet/saparede/runIII_hlt_jec/jra_ntuples/jescs_jul_2022_noPU/part_noPU_Run3Summer120X_CMSSW_12_4_0_pre3.root
#JRANTuple_NoPU=root://cms-xrd-global.cern.ch//store/group/phys_jetmet/saparede/runIII_hlt_jec/jra_ntuples/jescs_jul_2022_noPU/bigger_part_noPU_Run3Summer120X_CMSSW_12_4_0_pre3.root
#JRANTuple_PU=root://cms-xrd-global.cern.ch//store/group/phys_jetmet/saparede/runIII_hlt_jec/jra_ntuples/jescs_jul_2022_flatPU/part_flatPU_Run3Summer120X_CMSSW_12_4_0_pre3.root

#JRANTuple_PU=root://cms-xrd-global.cern.ch//store/group/phys_jetmet/saparede/runIII_hlt_jec/jra_ntuples/jescs_jul_2022_flatPU/part_flatPU_Run3Summer120X_CMSSW_12_4_0_pre3.root
#JRANTuple_PU=/eos/user/t/tchatzis/PUPPI_samples/test_newFixedDist_1M_JRA/HLT_Run3TRK/MinNeutralPt_0.0/MinNeutralPtSlope_0.0/Run3Winter21_QCD_Pt15to7000_14TeV_PU.root
#JRANTuple_PU=/eos/user/t/tchatzis/PUPPI_samples/puppiJetsLooseJRA/HLT_Run3TRK/MinNeutralPt_0.0/MinNeutralPtSlope_0.0//Run3Winter21_QCD_Pt15to7000_14TeV_PU.root
JRANTuple_PU=/eos/user/t/tchatzis/MTDtiming_samples/JRA_SPRING23_TICLV3_NEW/Phase2HLTTDR_QCD_Flat_Pt-15to3000_14TeV_PU200/Phase2HLTTDR_QCD_Flat_Pt-15to3000_14TeV_PU200.root

ERA=Phase2Spring23_MC
#ERA=Phase2Spring22_MC

#JET_TYPES=(
#  ak4pfHLT
#  ak8pfHLT
#  ak4caloHLT
#  ak8caloHLT
#  ak4pfpuppiHLT
#  ak8pfpuppiHLT
#  ak4pfchsHLT
#  ak8pfchsHLT
#  ak4pfclusterHLT
#  ak8pfclusterHLT
#)
JET_TYPES=(
  ak4pfpuppiHLT
)
### -------------------------

## -------------------------
## Main
## -------------------------
set -e

showHelpMsg=false
dryRun=false

# help message
usage() {
  cat <<@EOF
Usage:
  This script executes the steps to derive the Jet Energy Scale Corrections for HLT jets.
  It relies on the executables of the JetMETAnalysis package.

> ./fitJESCs [-h] [-o output_dir] [-n maxEvents] [-p]

Options:
  -h, --help          Show this help message
  -o, --output-dir    Path to output directory          [Default: .]
  -n, --maxEvents     Max number of events to process   [Default: -1]
  -b, --batch-mode    Run on batch mode (see htc scritp)[Default: false]
  -j, --jet-type      Jet name for batch (e.g. ak4pfpuppiHLT)   
  -p, --parallelise   Parallelise by jet algorithm      [Default: false]
  --skip-L1-PFPuppi   Skip L1FastJet for PFPuppi jets   [Default: false]
  -d, --dry-run       Enable dry-run mode               [Default: false]
@EOF
}

maxEvents=-1
paralleliseByAlgo=false
skipL1PFPuppi=false
doBatch=false
batchJetType="dummyJetType"

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|-khelp) showHelpMsg=true; shift;;
    -j|--jet-type) batchJetType=$2; shift; shift;;
    -o|--output-dir) outputDir=$2; shift; shift;;
    -n|--maxEvents) maxEvents=$2; shift; shift;;
    -p|--parallelise) paralleliseByAlgo=true; shift;;
    --skip-L1-PFPuppi) skipL1PFPuppi=true; shift;;
    -d|--dry-run) dryRun=true; shift;;
    -b|--batch-mode) doBatch=true; shift;;
    -j|--jet-type) batchJetType=$2; shift; shift;;
    *) printf "%s\n" ">> ERROR -- unrecognised command-line argument: ${1}"; exit 1; shift;;
  esac
done

if [ "X$doBatch" = "Xtrue" ]
then
  echo "running on batch mode for jet-type $batchJetType"
  JET_TYPES=( $batchJetType )
fi

# print help message
if [ "X${showHelpMsg}" = "Xtrue" ]; then
  usage
  exit 0
fi

INIDIR=${PWD}

if [[ ${outputDir} == "" ]]; then
  printf "%s\n" ">> ERROR -- empty path to output directory [-o]"
  exit 1
fi

if [ -d ${outputDir} ]; then
  printf "%s\n" ">> WARNING -- output directory already exists (existing files might get overwritten): ${outputDir}"
fi

stepCmd(){
  echo -e "#!/bin/bash\n\nset -e\n\n${1} 2>&1 | tee ${2}.log" > ${2}.sh
  chmod u+x ${2}.sh
  [ "X${dryRun}" = "Xtrue" ] || ./${2}.sh
  touch ${2}.done
}

runJECWorflowForOneAlgo(){
  jetType=${1}
  cd ${INIDIR}
  OUTDIR=${outputDir}/${jetType}
  mkdir -p ${OUTDIR}
  cd ${OUTDIR}

  stepN=0
  stepName=""

  dRgen=0.1
  if [[ ${jetType} == ak8* ]]; then dRgen=0.4; fi

  skipL1=false
  if [ "X${skipL1PFPuppi}" == "Xtrue" ] && [[ ${jetType} == *puppi* ]]; then
    skipL1=true
  fi

  ###
  ### L1FastJet
  ###
  if [ "X${skipL1}" != "Xtrue" ]; then

    stepNameOld=${stepName} && ((++stepN)) && stepName="step"$(printf "%02d" ${stepN})
    if [ ! -f ${stepName}.done ]; then
      CMD_STEP="jet_synchtest_x -algo1 ${jetType} -algo2 ${jetType} -sampleNoPU ${JRANTuple_NoPU} -samplePU ${JRANTuple_PU}"
      CMD_STEP+=" -ApplyJEC false"
      CMD_STEP+=" -ignoreNPV true -overwriteNPVwithNPUInTime true"
      CMD_STEP+=" -useweight false -doNotSave true"
      CMD_STEP+=" -iftest true -maxEvts ${maxEvents} -outputPath ."
      stepCmd "mkdir -p plots_${stepName}\n\n${CMD_STEP}" ${stepName}
    fi

    stepNameOld=${stepName} && ((++stepN)) && stepName="step"$(printf "%02d" ${stepN})
    if [ ! -f ${stepName}.done ]; then
      CMD_STEP="jet_synchplot_x -algo1 ${jetType} -algo2 ${jetType} -fixedRange false -tdr true"
      CMD_STEP+=" -inputDir ./ -outDir plots_${stepName} -outputFormat .png"
      stepCmd "mkdir -p plots_${stepName}\n\n${CMD_STEP}" ${stepName}
    fi

    stepNameOld=${stepName} && ((++stepN)) && stepName="step"$(printf "%02d" ${stepN})
    if [ ! -f ${stepName}.done ]; then
      CMD_STEP="jet_synchfit_x__hlt -algo1 ${jetType} -algo2 ${jetType} -functionType standard+gaussian -era ${ERA} -inputDir ./ -outputDir ./"
      stepCmd "mkdir -p plots_${stepName}\n\n${CMD_STEP}" ${stepName}
    fi

    stepNameOld=${stepName} && ((++stepN)) && stepName="step"$(printf "%02d" ${stepN})
    if [ ! -f ${stepName}.done ]; then
      CMD_STEP="jet_synchtest_x -algo1 ${jetType} -algo2 ${jetType} -sampleNoPU ${JRANTuple_NoPU} -samplePU ${JRANTuple_PU}"
      CMD_STEP+=" -ApplyJEC true -JECpar ./${ERA}_L1FastJet_*.txt"
      CMD_STEP+=" -ignoreNPV true -overwriteNPVwithNPUInTime true"
      CMD_STEP+=" -useweight false -doNotSave true"
      CMD_STEP+=" -iftest true -maxEvts ${maxEvents} -outputPath plots_${stepName}"
      stepCmd "mkdir -p plots_${stepName}\n\n${CMD_STEP}" ${stepName}
    fi

    stepNameOld=${stepName} && ((++stepN)) && stepName="step"$(printf "%02d" ${stepN})
    if [ ! -f ${stepName}.done ]; then
      CMD_STEP="jet_synchplot_x -algo1 ${jetType} -algo2 ${jetType} -fixedRange false -tdr true"
      CMD_STEP+=" -inputDir plots_${stepNameOld} -outDir plots_${stepName} -outputFormat .png"
      stepCmd "mkdir -p plots_${stepName}\n\n${CMD_STEP}" ${stepName}
    fi
  fi

  ###
  ### L2Relative
  ### - contains both L2 and L3 JESCs
  ###   (L3Absolute file will be dummy, i.e. equal to unity)
  ###
  stepNameOld=${stepName} && ((++stepN)) && stepName="step"$(printf "%02d" ${stepN})
  if [ ! -f ${stepName}.done ]; then
    CMD_STEP="jet_response_analyzer_x ${JESC_BASE}/config/jra_hltPhase2.config -input ${JRANTuple_PU} -algs ${jetType}:${dRgen}"
    CMD_STEP+=" -era ${ERA} -output plots_${stepName}/histogram_${jetType}l1_${stepName}.root -maxEvts ${maxEvents}"
    CMD_STEP+=" -useweight false -nrefmax 50 -relrspmin 0.0 -relrspmax 5.0 -nbinsabsrsp 0 -nbinsetarsp 0 -nbinsphirsp 0 -nbinsrelrsp 200 -doflavor false"
    if [ "X${skipL1}" != "Xtrue" ]; then
      CMD_STEP+=" -path ./ -levels 1"
    fi
    stepCmd "mkdir -p plots_${stepName}\n\n${CMD_STEP}" ${stepName}
  fi

  stepNameOld=${stepName} && ((++stepN)) && stepName="step"$(printf "%02d" ${stepN})
  if [ ! -f ${stepName}.done ]; then
    CMD_STEP="jet_l2_correction_x -algs ${jetType} -era ${ERA} -l2l3 true"
    CMD_STEP+=" -input plots_${stepNameOld}/histogram_${jetType}l1_${stepNameOld}.root -outputDir ./ -output l2p3.root"
    CMD_STEP+=" -makeCanvasVariable AbsCorVsJetPt:JetEta -batch true -histMet median -l2pffit standard -maxFitIter 50"
    CMD_STEP+=" -ptclipfit false -ptclip 0.0"
    stepCmd "mkdir -p plots_${stepName}\n\n${CMD_STEP}" ${stepName}
  fi

  stepNameOld=${stepName} && ((++stepN)) && stepName="step"$(printf "%02d" ${stepN})
  if [ ! -f ${stepName}.done ]; then
    CMD_STEP="jet_correction_analyzer_x -ptmin 0 -inputFilename ${JRANTuple_PU} -algs ${jetType} -drmax ${dRgen} -evtmax ${maxEvents}"
    CMD_STEP+=" -useweight false -path ./ -era ${ERA} -outputDir plots_${stepName} -nbinsrelrsp 200 -relrspmin 0.0 -relrspmax 5.0 -nrefmax 50 "
    if [ "X${skipL1}" != "Xtrue" ]; then
      CMD_STEP+=" -levels 1 2 -L1FastJet true"
    else
      CMD_STEP+=" -levels 2 -L1FastJet false"
    fi
    stepCmd "mkdir -p plots_${stepName}\n\n${CMD_STEP}" ${stepName}
  fi

  stepNameOld=${stepName} && ((++stepN)) && stepName="step"$(printf "%02d" ${stepN})
  if [ ! -f ${stepName}.done ]; then
    CMD_STEP="jet_draw_closure_x -path plots_${stepNameOld} -filename Closure_${jetType} -histMet median -outputDir plots_${stepName}"
    CMD_STEP+=" -draw_guidelines true -doPt true -doEta true -doRatioPt false -doRatioEta false; "
    CMD_STEP+="jet_draw_corrections_x -algs ${jetType} -outputDir plots_${stepNameOld} -era ${ERA} -useL2Cor true"
    if [ "X${skipL1}" != "Xtrue" ]; then
      CMD_STEP+=" -useL1FasCor true"
    else
      CMD_STEP+=" -useL1FasCor false"
    fi
    
    stepCmd "mkdir -p plots_${stepName}\n\n${CMD_STEP}" ${stepName}
  fi

  ###
  ### JESC .txt files copied to jesc/
  ###
  if [ "X${dryRun}" != "Xtrue" ]; then
    jecFile_l1=${JESC_BASE}/data/JEC_L1FastJet_Dummy.txt
    if [ $(ls ${ERA}_L1FastJet_*.txt 2> /dev/null | wc -l) -eq 1 ]; then
      jecFile_l1=$(ls ${ERA}_L1FastJet_*.txt)
    fi

    jecFile_l2=None
    if [ $(ls ${ERA}_L2Relative_*.txt 2> /dev/null | wc -l) -eq 1 ]; then
      jecFile_l2=$(ls ${ERA}_L2Relative_*.txt)
    else
      printf "%s\n" ">> ERROR -- text file with L2Relative JESC not found: ${ERA}_L2Relative_*.txt"
      return 1
    fi

    jetTag=${jecFile_l2/${ERA}_L2Relative_/}
    jetTag=${jetTag/.txt/}
    
    mkdir -p jesc
    # corrections implemented L1, L2L3 
    cp ${jecFile_l1} ${jecFile_l2} jesc
    # in case the L1's where not activated  (for PUPPI) give the dummy file
    # the appropriate form
    if [ -f jesc/JEC_L1FastJet_Dummy.txt ] 
    then mv jesc/JEC_L1FastJet_Dummy.txt jesc/${ERA}_L1FastJet_${jetTag}.txt
    fi
    
    # dummy files for L2residual , L3residual
    cp ${JESC_BASE}/data/JEC_L3Absolute_Dummy.txt jesc/${ERA}_L3Absolute_${jetTag}.txt
    cp ${JESC_BASE}/data/JEC_L2L3Residual_Dummy.txt jesc/${ERA}_L2L3Residual_${jetTag}.txt
  fi
}

NUM_PROC=$(nproc)
for jet_type in "${JET_TYPES[@]}"; do
  if [ "X${paralleliseByAlgo}" = "Xtrue" ]; then
    while [ $(jobs -p | wc -l) -ge ${NUM_PROC} ]; do sleep 5; done
    runJECWorflowForOneAlgo ${jet_type} || true &
  else
    runJECWorflowForOneAlgo ${jet_type}
  fi
done

jobs
wait || true
